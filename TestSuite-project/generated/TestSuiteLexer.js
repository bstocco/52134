// Generated from TestSuite.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,25,197,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,0,1,0,1,
0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,5,
11,128,8,11,10,11,12,11,131,9,11,1,11,1,11,1,12,1,12,5,12,137,8,12,10,12,
12,12,140,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
17,1,18,1,18,1,19,1,19,1,20,1,20,5,20,160,8,20,10,20,12,20,163,9,20,1,21,
4,21,166,8,21,11,21,12,21,167,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,1,22,1,22,1,22,1,22,1,22,3,22,184,8,22,1,23,3,23,187,8,23,1,23,1,23,1,
24,4,24,192,8,24,11,24,12,24,193,1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,
6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,6,3,0,10,10,13,13,34,34,3,0,10,
10,13,13,39,39,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
57,2,0,9,9,32,32,203,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,58,1,0,
0,0,5,63,1,0,0,0,7,70,1,0,0,0,9,79,1,0,0,0,11,82,1,0,0,0,13,88,1,0,0,0,15,
102,1,0,0,0,17,107,1,0,0,0,19,116,1,0,0,0,21,123,1,0,0,0,23,125,1,0,0,0,
25,134,1,0,0,0,27,143,1,0,0,0,29,145,1,0,0,0,31,147,1,0,0,0,33,149,1,0,0,
0,35,151,1,0,0,0,37,153,1,0,0,0,39,155,1,0,0,0,41,157,1,0,0,0,43,165,1,0,
0,0,45,183,1,0,0,0,47,186,1,0,0,0,49,191,1,0,0,0,51,52,5,112,0,0,52,53,5,
114,0,0,53,54,5,117,0,0,54,55,5,101,0,0,55,56,5,98,0,0,56,57,5,97,0,0,57,
2,1,0,0,0,58,59,5,100,0,0,59,60,5,97,0,0,60,61,5,100,0,0,61,62,5,111,0,0,
62,4,1,0,0,0,63,64,5,99,0,0,64,65,5,117,0,0,65,66,5,97,0,0,66,67,5,110,0,
0,67,68,5,100,0,0,68,69,5,111,0,0,69,6,1,0,0,0,70,71,5,101,0,0,71,72,5,110,
0,0,72,73,5,116,0,0,73,74,5,111,0,0,74,75,5,110,0,0,75,76,5,99,0,0,76,77,
5,101,0,0,77,78,5,115,0,0,78,8,1,0,0,0,79,80,5,101,0,0,80,81,5,115,0,0,81,
10,1,0,0,0,82,83,5,110,0,0,83,84,5,111,0,0,84,85,5,32,0,0,85,86,5,101,0,
0,86,87,5,115,0,0,87,12,1,0,0,0,88,89,5,100,0,0,89,90,5,101,0,0,90,91,5,
98,0,0,91,92,5,101,0,0,92,93,5,32,0,0,93,94,5,99,0,0,94,95,5,111,0,0,95,
96,5,110,0,0,96,97,5,116,0,0,97,98,5,101,0,0,98,99,5,110,0,0,99,100,5,101,
0,0,100,101,5,114,0,0,101,14,1,0,0,0,102,103,5,100,0,0,103,104,5,101,0,0,
104,105,5,98,0,0,105,106,5,101,0,0,106,16,1,0,0,0,107,108,5,99,0,0,108,109,
5,111,0,0,109,110,5,110,0,0,110,111,5,116,0,0,111,112,5,105,0,0,112,113,
5,101,0,0,113,114,5,110,0,0,114,115,5,101,0,0,115,18,1,0,0,0,116,117,5,101,
0,0,117,118,5,120,0,0,118,119,5,105,0,0,119,120,5,115,0,0,120,121,5,116,
0,0,121,122,5,101,0,0,122,20,1,0,0,0,123,124,5,121,0,0,124,22,1,0,0,0,125,
129,5,34,0,0,126,128,8,0,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,
0,0,129,130,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,5,34,0,0,133,
24,1,0,0,0,134,138,5,39,0,0,135,137,8,1,0,0,136,135,1,0,0,0,137,140,1,0,
0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,
142,5,39,0,0,142,26,1,0,0,0,143,144,5,36,0,0,144,28,1,0,0,0,145,146,5,91,
0,0,146,30,1,0,0,0,147,148,5,93,0,0,148,32,1,0,0,0,149,150,5,123,0,0,150,
34,1,0,0,0,151,152,5,125,0,0,152,36,1,0,0,0,153,154,5,44,0,0,154,38,1,0,
0,0,155,156,5,46,0,0,156,40,1,0,0,0,157,161,7,2,0,0,158,160,7,3,0,0,159,
158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,42,1,0,0,
0,163,161,1,0,0,0,164,166,7,4,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,
1,0,0,0,167,168,1,0,0,0,168,44,1,0,0,0,169,170,5,118,0,0,170,171,5,101,0,
0,171,172,5,114,0,0,172,173,5,100,0,0,173,174,5,97,0,0,174,175,5,100,0,0,
175,176,5,101,0,0,176,177,5,114,0,0,177,184,5,111,0,0,178,179,5,102,0,0,
179,180,5,97,0,0,180,181,5,108,0,0,181,182,5,115,0,0,182,184,5,111,0,0,183,
169,1,0,0,0,183,178,1,0,0,0,184,46,1,0,0,0,185,187,5,13,0,0,186,185,1,0,
0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,189,5,10,0,0,189,48,1,0,0,0,190,
192,7,5,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,
0,0,194,195,1,0,0,0,195,196,6,24,0,0,196,50,1,0,0,0,8,0,129,138,161,167,
183,186,193,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class TestSuiteLexer extends antlr4.Lexer {

    static grammarFileName = "TestSuite.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'prueba'", "'dado'", "'cuando'", "'entonces'", 
                         "'es'", "'no es'", "'debe contener'", "'debe'", 
                         "'contiene'", "'existe'", "'y'", null, null, "'$'", 
                         "'['", "']'", "'{'", "'}'", "','", "'.'" ];
	static symbolicNames = [ null, "PRUEBA", "DADO", "CUANDO", "ENTONCES", 
                          "ES", "NO_ES", "DEBE_CONTENER", "DEBE", "CONTIENE", 
                          "EXISTE", "Y", "TEXTO_DOBLE", "TEXTO_SIMPLE", 
                          "DOLAR", "LBRACK", "RBRACK", "LBRACE", "RBRACE", 
                          "COMA", "PUNTO", "IDENTIFICADOR", "NUMERO", "BOOLEANO", 
                          "NEWLINE", "WS" ];
	static ruleNames = [ "PRUEBA", "DADO", "CUANDO", "ENTONCES", "ES", "NO_ES", 
                      "DEBE_CONTENER", "DEBE", "CONTIENE", "EXISTE", "Y", 
                      "TEXTO_DOBLE", "TEXTO_SIMPLE", "DOLAR", "LBRACK", 
                      "RBRACK", "LBRACE", "RBRACE", "COMA", "PUNTO", "IDENTIFICADOR", 
                      "NUMERO", "BOOLEANO", "NEWLINE", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

TestSuiteLexer.EOF = antlr4.Token.EOF;
TestSuiteLexer.PRUEBA = 1;
TestSuiteLexer.DADO = 2;
TestSuiteLexer.CUANDO = 3;
TestSuiteLexer.ENTONCES = 4;
TestSuiteLexer.ES = 5;
TestSuiteLexer.NO_ES = 6;
TestSuiteLexer.DEBE_CONTENER = 7;
TestSuiteLexer.DEBE = 8;
TestSuiteLexer.CONTIENE = 9;
TestSuiteLexer.EXISTE = 10;
TestSuiteLexer.Y = 11;
TestSuiteLexer.TEXTO_DOBLE = 12;
TestSuiteLexer.TEXTO_SIMPLE = 13;
TestSuiteLexer.DOLAR = 14;
TestSuiteLexer.LBRACK = 15;
TestSuiteLexer.RBRACK = 16;
TestSuiteLexer.LBRACE = 17;
TestSuiteLexer.RBRACE = 18;
TestSuiteLexer.COMA = 19;
TestSuiteLexer.PUNTO = 20;
TestSuiteLexer.IDENTIFICADOR = 21;
TestSuiteLexer.NUMERO = 22;
TestSuiteLexer.BOOLEANO = 23;
TestSuiteLexer.NEWLINE = 24;
TestSuiteLexer.WS = 25;



